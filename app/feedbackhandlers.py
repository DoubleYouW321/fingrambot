from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)

import app.database.requests as rq

from config import ADMIN_CHAT_ID


feedback_router = Router()

ADMIN = ADMIN_CHAT_ID

feedback_markups = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='stop')]
])

class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()


@feedback_router.message(Command("feedback"))
async def cmd_feedback_start(message: Message, state: FSMContext):
    await message.answer("üìù –†–∞–∑–¥–µ–ª –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:", reply_markup=feedback_markups)
    await state.set_state(FeedbackStates.waiting_for_feedback)

@feedback_router.message(FeedbackStates.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext, bot: Bot):
    user_feedback = message.text
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    first_name = message.from_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    admin_message = (
        "üì® –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username})\n"
        f"üÜî ID: {user_id}\n"
        f"üí¨ –û—Ç–∑—ã–≤: {user_feedback}"
    )

    try:
        await bot.send_message(ADMIN, admin_message)
        
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞.")
    
    await rq.set_comment(message.from_user.id, message.text)
    await state.clear()

@feedback_router.callback_query(F.data == 'stop')
async def process_feedback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()


 
