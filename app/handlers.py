from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from app.database.models import User, async_session

import app.keyboards as kb
import app.database.requests as rq

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    try:
        await rq.set_user(message.from_user.id, message.from_user.username)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    try:
        with open(r'images\start_bot_picture.jpg', 'rb') as photo:
            await message.answer_photo(photo, caption='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —á–∞—Ç –±–æ—Ç–µ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é')
    except FileNotFoundError:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —á–∞—Ç –±–æ—Ç–µ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é')

@router.message(Command("users"))
async def cmd_users(message: Message):
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(select(User))
            users = result.scalars().all()
            
            if not users:
                await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            users_list = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                users_list += f"üÜî ID: {user.tg_id}\n"
                users_list += f"üë§ –ò–º—è: {user.user_name}\n"
                users_list += f"#Ô∏è‚É£ ID –≤ –ë–î: {user.id}\n"
                users_list += "‚îÄ" * 20 + "\n"
            
            await message.answer(users_list)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.message(Command('learnmaterials'))
async def learning(message: Message):
    await message.answer('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞–∂–Ω—ã–µ –æ–±—É—á–∞—é—â–º–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ñ–∏–Ω-–≥–∞—Ä–º–æ—Ç–Ω–æ—Å—Ç–∏', reply_markup=kb.learning_materials)

@router.callback_query(F.data == 'credits')
async def credits(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ö—Ä–µ–¥–∏—Ç—ã"')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'credit_story')
async def story(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ö—Ä–µ–¥–∏—Ç—ã"')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'ipoteka')
async def ipoteka(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ò–ø–æ—Ç–µ–∫–∞"')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é:', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'plans')
async def plans(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'fishing')
async def fishing(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–§–∏—à–∏–Ω–≥"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –§–∏—à–∏–Ω–≥', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'hackers')
async def hackers(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'startup')
async def startup(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ù–∞—á–∞—Ç—å –±–∏–∑–Ω–µ—Å"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ù–∞—á–∞—Ç—å –±–∏–∑–Ω–µ—Å', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'nalogs')
async def nalogs(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ù–∞–ª–æ–≥–∏"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ù–∞–ª–æ–≥–∏', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'invest')
async def invest(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'vklads')
async def vklads(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–í–∫–ª–∞–¥—ã"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –í–∫–ª–∞–¥—ã', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'infl')
async def infl(callback: CallbackQuery):
    await callback.answer('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–ª—è—Ü–∏—è"')
    await callback.message.edit_text('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ –ò–Ω—Ñ–ª—è—Ü–∏—è', reply_markup=await kb.create_urls_builder(callback.data))

@router.callback_query(F.data == 'comeback_to_materials')
async def comeback_mat(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥"')
    await callback.message.edit_text('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞–∂–Ω—ã–µ –æ–±—É—á–∞—é—â–º–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ñ–∏–Ω-–≥–∞—Ä–º–æ—Ç–Ω–æ—Å—Ç–∏', reply_markup=kb.learning_materials)