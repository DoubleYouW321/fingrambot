from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import app.finans_calculator_keyboard as calc_kb

storage = MemoryStorage()
ipotek_router = Router()

class IpotekStates(StatesGroup):
    waiting_principal = State()
    waiting_rate = State()
    waiting_years = State()

class SimpleIpotekCalculator:
    @staticmethod
    def calculate(principal: float, rate: float, years: int) -> dict:

        months = years * 12
        months_rate = rate / 12 /100
        months_pay = principal * (months_rate * (1 + months_rate)**months) / ((1 + months_rate)**months - 1) 
        full_sum = months_pay * months
        overpayment = full_sum - principal
        return {
            'principal': principal,
            'rate': rate,
            'years': years,
            'months_pay': months_pay,
            'overpayment': overpayment,
            'full_sum': full_sum
        }


@ipotek_router.callback_query(F.data == 'ipotek_calc')
async def ipotek(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=calc_kb.ipotek)

@ipotek_router.callback_query(F.data == 'ipotek_info')
async def ipotek_info(callback: CallbackQuery):
    await callback.answer('')
    info_text = ("üè† –ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n"
        "üìä –ß—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n"
        "‚Ä¢ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂\n"
        "‚Ä¢ –û–±—â—É—é –ø–µ—Ä–µ–ø–ª–∞—Ç—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É\n"
        "‚Ä¢ –û–±—â—É—é —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç\n"
        "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É\n\n"
        "üîÑ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000000)\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5)\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20)\n\n"
        "üìà –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞:\n"
        "–°—É–º–º–∞: 5,000,000 ‚ÇΩ\n"
        "–°—Ç–∞–≤–∫–∞: 7.5%\n"
        "–°—Ä–æ–∫: 20 –ª–µ—Ç\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "‚Ä¢ –ü–ª–∞—Ç–µ–∂: ~40,742 ‚ÇΩ/–º–µ—Å\n"
        "‚Ä¢ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ~4,778,080 ‚ÇΩ\n"
        "‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ~9,778,080 ‚ÇΩ\n\n")
    await callback.message.edit_text(info_text, reply_markup=calc_kb.back_to_ipotek)

@ipotek_router.callback_query(F.data == 'ipotek_start')
async def infl_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await state.set_state(IpotekStates.waiting_principal)
    
    await state.update_data(user_id=callback.from_user.id)
    
    await callback.message.edit_text(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ø–æ—Ç–µ–∫–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000000"
    )

@ipotek_router.message(IpotekStates.waiting_principal)
async def process_principal(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.ipotek)
            await state.clear()
            return
            
        principal = float(message.text.replace(',', '.'))
        if principal <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            return
        
        await state.update_data(principal=principal)
        await state.set_state(IpotekStates.waiting_rate)
        await message.answer(
            f"üíµ –°—É–º–º–∞: {principal:,.0f} ‚ÇΩ\n\n"
            "üìà –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@ipotek_router.message(IpotekStates.waiting_rate)
async def process_rate(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data or 'principal' not in data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.ipotek)
            await state.clear()
            return
            
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")
            return
        
        await state.update_data(rate=rate)
        await state.set_state(IpotekStates.waiting_years)
        
        principal = data['principal']
        
        await message.answer(
            f"üíµ –°—É–º–º–∞: {principal:,.0f} ‚ÇΩ\n"
            f"üìà –°—Ç–∞–≤–∫–∞: {rate}%\n\n"
            "‚è± –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∏–ø–æ—Ç–µ–∫–∏ –≤ –≥–æ–¥–∞—Ö:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")

@ipotek_router.message(IpotekStates.waiting_years)
async def process_years(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data or 'principal' not in data or 'rate' not in data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.ipotek)
            await state.clear()
            return
            
        years = int(message.text)
        if years <= 0:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")
            return
        if years > 100:
            await message.answer("‚ùå –°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")
            return
        
        principal = data['principal']
        rate = data['rate']
        
        result = SimpleIpotekCalculator.calculate(principal, rate, years)
        
        response = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            f"üíµ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {result['principal']:,.0f} ‚ÇΩ\n"
            f"üìà –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {result['rate']}%\n"
            f"‚è± –°—Ä–æ–∫: {result['years']} –ª–µ—Ç\n\n"
            f"üí∞ –ï–∂–µ–º–µ—Å—è–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {result['months_pay']:,.0f} ‚ÇΩ\n"
            f"üí∏ –û–±—â–∞—è –ø–µ—Ä–µ–ø–ª–∞—Ç–∞: {result['overpayment']:,.0f} ‚ÇΩ\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ {result['full_sum']:,.0f} ‚ÇΩ"
        )
        
        await message.answer(response)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")

@ipotek_router.message(Command('cancel'))
@ipotek_router.message(F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_calculation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.", reply_markup=calc_kb.ipotek)
        return
    
    await state.clear()
    await message.answer("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=calc_kb.ipotek)

