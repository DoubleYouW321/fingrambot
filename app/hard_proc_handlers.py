from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

import app.finans_calculator_keyboard as calc_kb

storage = MemoryStorage()
calculator_router = Router()

class HardProcentsStates(StatesGroup):
    waiting_principal = State()
    waiting_rate = State()
    waiting_years = State()

class SimpleCompoundCalculator:
    @staticmethod
    def calculate(principal: float, rate: float, years: int) -> dict:

        r = rate / 100
        
        final_amount = principal * (1 + r) ** years
        profit = final_amount - principal
        
        return {
            'principal': principal,
            'rate': rate,
            'years': years,
            'final_amount': final_amount,
            'profit': profit
        }

@calculator_router.message(Command('calculator'))
async def calculator(message: Message):
    with open('images\calculator.jpg', 'rb') as photo:
        await message.answer(photo, caption="–í—ã–±–∏—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", reply_markup=calc_kb.calculators_keyboard)

@calculator_router.callback_query(F.data == 'hard_procents_calc')
async def hard_proc(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=calc_kb.hard_proc)

@calculator_router.callback_query(F.data == 'hard_proc_info')
async def hard_proc_info(callback: CallbackQuery):
     help_text = (
        "üìö –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n\n"
        "–í—Å–µ–≥–æ 3 —à–∞–≥–∞:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ –≥–æ–¥–∞—Ö\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–°—É–º–º–∞: 100000\n"
        "–°—Ç–∞–≤–∫–∞: 10\n"
        "–°—Ä–æ–∫: 5\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "–ß–µ—Ä–µ–∑ 5 –ª–µ—Ç: 161051 ‚ÇΩ\n"
        "–ü—Ä–∏–±—ã–ª—å: 61051 ‚ÇΩ"
    )
     await callback.message.edit_text(help_text, reply_markup=calc_kb.back_to_hard_proc)

@calculator_router.callback_query(F.data == 'hard_proc_start')
async def hard_proc_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await state.set_state(HardProcentsStates.waiting_principal)
    
    await state.update_data(user_id=callback.from_user.id)
    
    await callback.message.edit_text(
        "üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 100000"
    )

@calculator_router.message(HardProcentsStates.waiting_principal)
async def process_principal(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.hard_proc)
            await state.clear()
            return
            
        principal = float(message.text.replace(',', '.'))
        if principal <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
            return
        
        await state.update_data(principal=principal)
        await state.set_state(HardProcentsStates.waiting_rate)
        await message.answer(
            f"üíµ –°—É–º–º–∞: {principal:,.0f} ‚ÇΩ\n\n"
            "üìà –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@calculator_router.message(HardProcentsStates.waiting_rate)
async def process_rate(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data or 'principal' not in data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.hard_proc)
            await state.clear()
            return
            
        rate = float(message.text.replace(',', '.'))
        if rate <= 0:
            await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")
            return
        
        await state.update_data(rate=rate)
        await state.set_state(HardProcentsStates.waiting_years)
        
        principal = data['principal']
        
        await message.answer(
            f"üíµ –°—É–º–º–∞: {principal:,.0f} ‚ÇΩ\n"
            f"üìà –°—Ç–∞–≤–∫–∞: {rate}%\n\n"
            "‚è± –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ –≥–æ–¥–∞—Ö:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")

@calculator_router.message(HardProcentsStates.waiting_years)
async def process_years(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if not data or 'principal' not in data or 'rate' not in data:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=calc_kb.hard_proc)
            await state.clear()
            return
            
        years = int(message.text)
        if years <= 0:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")
            return
        if years > 100:
            await message.answer("‚ùå –°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ª–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")
            return
        
        principal = data['principal']
        rate = data['rate']
        
        result = SimpleCompoundCalculator.calculate(principal, rate, years)
        
        response = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:</b>\n\n"
            f"üíµ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {result['principal']:,.0f} ‚ÇΩ\n"
            f"üìà –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {result['rate']}%\n"
            f"‚è± –°—Ä–æ–∫: {result['years']} –ª–µ—Ç\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {result['final_amount']:,.0f} ‚ÇΩ\n"
            f"üí∏ –ü—Ä–∏–±—ã–ª—å: {result['profit']:,.0f} ‚ÇΩ\n\n"
            f"üí° –í–∞—à–∏ –¥–µ–Ω—å–≥–∏ –≤—ã—Ä–æ—Å–ª–∏ –≤ {result['final_amount']/result['principal']:.1f} —Ä–∞–∑"
        )
        
        await message.answer(response)
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫:")


@calculator_router.message(Command('cancel'))
@calculator_router.message(F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_calculation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.", reply_markup=calc_kb.hard_proc)
        return
    
    await state.clear()
    await message.answer("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=calc_kb.hard_proc)

