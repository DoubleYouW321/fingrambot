from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

routertest = Router()

questions = [
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ ¬´—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª?",
        "options": ["–î–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–¥—É—à–∫–∏", "–ó–∞–ø–∞—Å –Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø–æ–¥—É—à–∫–∏", "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"],
        "correct": "–ó–∞–ø–∞—Å –Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å"
    },
    {
        "question": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è?",
        "options": ["–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–ª–∞—Ç–µ–∂–µ–π", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç", "–ü–æ—Å–µ—â–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤"],
        "correct": "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–ª—è—Ü–∏—è?",
        "options": [" –†–æ—Å—Ç –¥–æ–ª–ª–∞—Ä–∞", "–†–æ—Å—Ç —Ü–µ–Ω", "–†–æ—Å—Ç –∑–∞—Ä–ø–ª–∞—Ç", "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫"],
        "correct": "–†–æ—Å—Ç —Ü–µ–Ω"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò–°?",
        "options": ["–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç", "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç", "–ù–∞–ª–∏—á–Ω—ã–π —Å—á–µ—Ç"],
        "correct": "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è?",
        "options": ["–û–¥–∏–Ω –∞–∫—Ç–∏–≤", "–†–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", "–¢–æ–ª—å–∫–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏"],
        "correct": "–†–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤?",
        "options": ["–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–°–Ω—è—Ç–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", "–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∞"],
        "correct": "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ü–°–ö?",
        "options": ["–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", "–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã", "–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"],
        "correct": "–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –±—é–¥–∂–µ—Ç?",
        "options": ["–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤", "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", "–î–µ–Ω—å–≥–∏ –≤ –∫–æ—à–µ–ª—å–∫–µ", "–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"],
        "correct": "–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞?",
        "options": ["–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç", "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏", "–¢–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω", "–ë–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞"],
        "correct": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏"
    },
    {
        "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥?",
        "options": ["–†–∞–±–æ—Ç–∞ –ø–æ –Ω–∞–π–º—É", "–î–æ—Ö–æ–¥ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π", "–†–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏", "–ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π"],
        "correct": "–î–æ—Ö–æ–¥ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π"
    }
]

user_scores = {}
user_questions_index = {}

@routertest.message(Command('starttest'))
async def start_test(message: Message):
    chat_id = message.from_user.id
    user_scores[chat_id] = 0
    user_questions_index[chat_id] = 0
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ! üß†\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.')
    await send_question(message, chat_id)

async def send_question(message: Message, chat_id):
    current_index = user_questions_index[chat_id]
    
    if current_index >= len(questions):
        score = user_scores[chat_id]
        total = len(questions)
        # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            f'üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}', 
            reply_markup=ReplyKeyboardRemove()
        )
        del user_questions_index[chat_id]
        del user_scores[chat_id]
        return
    
    question = questions[current_index]
    markup = ReplyKeyboardBuilder()
    for option in question['options']:
        markup.add(KeyboardButton(text=option))
    markup.add(KeyboardButton(text='‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'))
    markup.adjust(1)

    await message.answer(
        f"–í–æ–ø—Ä–æ—Å {current_index + 1}/{len(questions)}:\n{question['question']}", 
        reply_markup=markup.as_markup(resize_keyboard=True)
    )

@routertest.message(F.text == '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
async def cancel_quiz(message: Message):
    chat_id = message.from_user.id
    if chat_id in user_scores:
        score = user_scores[chat_id]
        total = len(questions)
        # –Ø–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}",
            reply_markup=ReplyKeyboardRemove()
        )
        if chat_id in user_questions_index:
            del user_questions_index[chat_id]
        if chat_id in user_scores:
            del user_scores[chat_id]

@routertest.message(F.text.in_([option for question in questions for option in question['options']]))
async def check_answer(message: Message):
    chat_id = message.from_user.id
    
    if chat_id not in user_questions_index or chat_id not in user_scores:
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /starttest")
        return
    
    current_index = user_questions_index[chat_id]

    if current_index >= len(questions):
        return
    
    question = questions[current_index]
    
    if message.text == question['correct']:
        user_scores[chat_id] += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=ReplyKeyboardRemove())
    else:
        correct_answer = question['correct']
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}", reply_markup=ReplyKeyboardRemove())
    
    import asyncio
    await asyncio.sleep(1)
    
    user_questions_index[chat_id] += 1
    await send_question(message, chat_id)