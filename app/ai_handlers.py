from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.generate import ai_generate
import asyncio
import html
import app.ai_keyboard as ai_kb

ai_router = Router()

class Gen(StatesGroup):
    wait = State()


FINANCE_KEYWORDS = [
    '—Ñ–∏–Ω–∞–Ω—Å', '–¥–µ–Ω—å–≥', '–±—é–¥–∂–µ—Ç', '–∏–Ω–≤–µ—Å—Ç', '–∫—Ä–µ–¥–∏—Ç', '–≤–∫–ª–∞–¥', '—Å–±–µ—Ä–µ–∂–µ–Ω–∏', 
    '–Ω–∞–ª–æ–≥', '–∏–ø–æ—Ç–µ–∫', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω', '–∞–∫—Ü–∏', '–æ–±–ª–∏–≥–∞—Ü', '—Ñ–æ–Ω–¥', '–∫—Ä–∏–ø—Ç–æ',
    '–±–∏—Ç–∫–æ–∏–Ω', '—ç—Ñ–∏—Ä', '–¥–µ–ø–æ–∑–∏—Ç', '–∑–∞–µ–º', '–¥–æ–ª–≥', '–¥–æ—Ö–æ–¥', '—Ä–∞—Å—Ö–æ–¥', '—ç–∫–æ–Ω–æ–º–∏',
    '–ø–µ–Ω—Å–∏', '–Ω–∞–∫–æ–ø–ª–µ–Ω', '—Ç—Ä–∞—Ç', '–ø–æ–∫—É–ø–∫', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç', '—Ä—É–±–ª', '–¥–æ–ª–ª–∞—Ä',
    '–µ–≤—Ä–æ', '–∫—É—Ä—Å', '–≤–∞–ª—é—Ç', '–±–∞–Ω–∫', '–∫–∞—Ä—Ç', '–ø–µ—Ä–µ–≤–æ–¥', '–ø–ª–∞—Ç–µ–∂', '–¥–æ–ª–ª–∞—Ä', '—Ü–µ–Ω'
]

def is_finance_related(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"""
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in FINANCE_KEYWORDS)

@ai_router.message(Command('ai_consultation'))
async def cmd_start_consultation(message: Message):
    await message.answer('ü§ñ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', reply_markup=ai_kb.consult_choose)

@ai_router.callback_query(F.data == 'start_consult')
async def cmd_start_consult(callback: CallbackQuery):
    await callback.answer('')
    with open('images\hello_ai.jpg', 'rb') as photo:
        await callback.message.answer(photo, caption='üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n\n'
        '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º:\n'
        '‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è\n'
        '‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –∏ –∏–ø–æ—Ç–µ–∫–∞\n' 
        '‚Ä¢ –ë—é–¥–∂–µ—Ç –∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤\n'
        '‚Ä¢ –ù–∞–ª–æ–≥–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å\n'
        '‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ\n'
        '‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∞–∫—Ü–∏–∏\n\n'
        '–û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã')


@ai_router.message(Gen.wait)
async def stop_flood(message: Message):
    await message.answer('‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...')

def split_message(text: str, max_length: int = 4096) -> list:
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ""
    
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        if len(paragraph) > max_length:
            sentences = paragraph.split('. ')
            for sentence in sentences:
                if len(current_chunk) + len(sentence) + 2 <= max_length:
                    current_chunk += sentence + ". "
                else:
                    if current_chunk:
                        chunks.append(current_chunk.strip())
                    current_chunk = sentence + ". "
        else:
            if len(current_chunk) + len(paragraph) + 2 <= max_length:
                current_chunk += paragraph + "\n\n"
            else:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = paragraph + "\n\n"
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def clean_text(text: str) -> str:
    if not text:
        return ""
    
    text = text.replace('**', '').replace('__', '').replace('```', '')
    text = html.escape(text)
    
    return text

async def send_long_message(message: Message, text: str, delay: float = 0.5):
    clean_text_content = clean_text(text)
    chunks = split_message(clean_text_content)
    
    if len(chunks) == 1:
        await message.answer(chunks[0])
        return
    
    first_chunk = chunks[0] + f"\n\nüìÑ –°–æ–æ–±—â–µ–Ω–∏–µ 1/{len(chunks)}"
    await message.answer(first_chunk)
    
    for i, chunk in enumerate(chunks[1:], 2):
        chunk_with_counter = f"üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i}/{len(chunks)}:\n\n{chunk}"
        await asyncio.sleep(delay)
        await message.answer(chunk_with_counter)

@ai_router.message()
async def generating(message: Message, state: FSMContext):
    if len(message.text) > 4000:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if not is_finance_related(message.text):
        await message.answer(
            "‚ùå –Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–∞–º:\n"
            "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã –∏ –±—é–¥–∂–µ—Ç\n" 
            "‚Ä¢ –ù–∞–ª–æ–≥–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
        )
        return
    
    await state.set_state(Gen.wait)
    
    processing_msg = await message.answer("üíº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    try:
        response = await asyncio.wait_for(
            ai_generate(message.text), 
            timeout=60
        )
        
        await processing_msg.delete()
        
        if not response or response.strip() == "":
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return
        
        await send_long_message(message, response)
            
    except asyncio.TimeoutError:
        await processing_msg.delete()
        await message.answer("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    except Exception as e:
        await processing_msg.delete()
        error_message = str(e)
        
        if "rate limit" in error_message.lower() or "429" in error_message:
            await message.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        elif "timeout" in error_message.lower():
            await message.answer("‚è∞ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    finally:
        await state.clear()

@ai_router.callback_query(F.data == 'consult_info')
async def cmd_help_ai(callback: CallbackQuery):
    help_text = (
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å:\n"
        "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏ –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ –ö—Ä–µ–¥–∏—Ç–∞–º–∏ –∏ –∏–ø–æ—Ç–µ–∫–æ–π\n"
        "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞\n"
        "‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
        "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "–û—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ–º—ã"
    )
    await callback.answer('')
    await callback.message.answer(help_text, reply_markup=ai_kb.back_to_consult)